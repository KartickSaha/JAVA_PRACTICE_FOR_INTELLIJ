1.What is OOP?

Object-oriented programming System(OOPs) is a programming paradigm
based on the concept of “objects” that contain data and methods.
The primary purpose of object-oriented programming is to increase
the flexibility and maintainability of programs. Object oriented
programming brings together data and its behaviour(methods)
in a single location(object) makes it easier to understand how a program works.

2. What is an Object?
Object is a bundle of data and its behaviour(often known as methods).
Objects have two characteristics: They have states and behaviors.
Examples of states and behaviors:
Example:
Object: House
State: Address, Color, Area
Behavior: Open door, close door

3. What are the Characteristics of Objects?
a. Abstraction
b. Encaptulation
c. Message passing

4. What is Abstraction?
Abstraction is a process where you show only "relevant" data and "hide"
unnecessary details of an object from the user.

5. What is Encaptulation?
Encaptulation simply means binding object state (fields) and behavior (methods) together.
If you are creating class, you are doing Encaptulation.

5.1 How to achieve Encaptulation in a class?
a) Make the instance variables private so that they cannot be accessed
 directly from outside the class. You can only set and get values of
 these variables through the methods of the class.
b) Have getter and setter methods in the class to set and get the values of the fields.

6. What is Message passing?
A single of Object by itself may not be very useful. An application contains many objects.
One object interacts with other object by invoking methods on that object. It is also reffered
to as Method Invocation.

7. What is Class?
A class can be considered as a blueprint using which you can as many objects as you like.

8. What is Constructor?
Constructor looks like a method but it is in fact not a method.
It’s name is same as class name and it does not return any value.

Examples Of Default Constructor:
MyClass obj = new MyClass();
If you look at the right side of this statement,
we are calling the default constructor of class myClass to create
a new object (or instance).

We can also have parameters in the constructor,
such constructors are known as parametrized constructors.

 EXAMPLE OF CONSTRUCTOR:

 public class ConstructorExample {

    int age;
    String name;

    //Default constructor
    ConstructorExample(){
 	this.name="Chaitanya";
 	this.age=30;
    }

    //Parameterized constructor
    ConstructorExample(String n,int a){
 	this.name=n;
 	this.age=a;
    }
    public static void main(String args[]){
 	ConstructorExample obj1 = new ConstructorExample();
 	ConstructorExample obj2 =
 		       new ConstructorExample("Steve", 56);
 	System.out.println(obj1.name+" "+obj1.age);
 	System.out.println(obj2.name+" "+obj2.age);
    }
 }

 9.What is Inheritance?
 The process by which one class acquires the properties and functionalities of another
 class is called inheritance.
 Inheritance provides the idea of reusability of code and each sub class defines only
 those features that are unique to it, rest of the features can be inherited from the parent class.

 So,Inheritance is a process of defining a new class based on an existing class
 by extending its common data members and methods. Inheritance allows us to reuse of code,
 it improves reusability in your java application.
 The parent class is called the base class or super class.
 The child class that extends the base class is called the derived class or sub class or child class.

 10. How many type of Inheritnace in java?
 Single Inheritance: refers to a child and parent class relationship
 where a class extends the another class.

 Multilevel inheritance: refers to a child and parent class relationship
 where a class extends the child class.
 For example class A extends class B and class B extends class C.

 Hierarchical inheritance: refers to a child and parent class relationship
 where more than one classes extends the same class.
 For example, class B extends class A and class C extends class A.

 Multiple Inheritance: refers to the concept of one class extending more than one classes,
 which means a child class has two parent classes. Java doesn’t support multiple inheritance.

 11. What is Polymorphism?
 Polymorphism is a object oriented programming feature that allows us to
 perform a single action in different ways.